[
  {
    "objectID": "public-notebooks/fair-results-8k.html",
    "href": "public-notebooks/fair-results-8k.html",
    "title": "jmppeft",
    "section": "",
    "text": "import plotly.io as pio\n\npio.renderers.default = \"plotly_mimetype+notebook_connected\"\n\n\nfrom pathlib import Path\n\nimport dill\nimport numpy as np\nimport pandas as pd\nimport rich\nimport seaborn as sns\nfrom matbench_discovery.metrics import stable_metrics\nfrom tqdm.auto import tqdm\n\nsns.set_context(\"notebook\")\n\n\ndef plot_relax(preds_targets, title: str):\n    e_form_true, e_form_pred = zip(*preds_targets[\"e_form\"])\n    e_form_true = np.array(e_form_true)\n    e_form_pred = np.array(e_form_pred)\n\n    e_above_hull_true, e_above_hull_pred = zip(*preds_targets[\"e_above_hull\"])\n    e_above_hull_true = np.array(e_above_hull_true)\n    e_above_hull_pred = np.array(e_above_hull_pred)\n\n    rich.print(\n        {\n            \"e_form\": {\"pred\": e_form_pred.shape, \"true\": e_form_true.shape},\n            \"e_above_hull\": {\n                \"pred\": e_above_hull_pred.shape,\n                \"true\": e_above_hull_true.shape,\n            },\n        }\n    )\n\n    metrics = stable_metrics(e_above_hull_true, e_above_hull_pred, fillna=False)\n    # rich.print(metrics)\n    return {\"name\": title, **metrics}\n\n\nbase_dir = Path(\"/mnt/datasets/jmp-mptrj-checkpoints/relaxer-results-8k/\")\nall_metrics = [\n    plot_relax(dill.load(f.open(\"rb\")), title=f.stem)\n    for f in tqdm(list(base_dir.glob(\"*.dill\")))\n]\ndf = pd.DataFrame.from_records(all_metrics)\ndf\n\n\n\n\nType checking the following modules: ('jmppeft',)\n\n\nLoading 'wbm_summary' from cached file at '/root/.cache/matbench-discovery/1.0.0/wbm/2023-12-13-wbm-summary.csv.gz'\n\n\n{'e_form': {'pred': (8192,), 'true': (8192,)}, 'e_above_hull': {'pred': (8192,), 'true': (8192,)}}\n\n\n\n{'e_form': {'pred': (8192,), 'true': (8192,)}, 'e_above_hull': {'pred': (8192,), 'true': (8192,)}}\n\n\n\n{'e_form': {'pred': (8192,), 'true': (8192,)}, 'e_above_hull': {'pred': (8192,), 'true': (8192,)}}\n\n\n\n{'e_form': {'pred': (8192,), 'true': (8192,)}, 'e_above_hull': {'pred': (8192,), 'true': (8192,)}}\n\n\n\n{'e_form': {'pred': (8192,), 'true': (8192,)}, 'e_above_hull': {'pred': (8192,), 'true': (8192,)}}\n\n\n\n{'e_form': {'pred': (8192,), 'true': (8192,)}, 'e_above_hull': {'pred': (8192,), 'true': (8192,)}}\n\n\n\n{'e_form': {'pred': (8192,), 'true': (8192,)}, 'e_above_hull': {'pred': (8192,), 'true': (8192,)}}\n\n\n\n{'e_form': {'pred': (8192,), 'true': (8192,)}, 'e_above_hull': {'pred': (8192,), 'true': (8192,)}}\n\n\n\n{'e_form': {'pred': (8192,), 'true': (8192,)}, 'e_above_hull': {'pred': (8192,), 'true': (8192,)}}\n\n\n\n{'e_form': {'pred': (8192,), 'true': (8192,)}, 'e_above_hull': {'pred': (8192,), 'true': (8192,)}}\n\n\n\n{'e_form': {'pred': (8192,), 'true': (8192,)}, 'e_above_hull': {'pred': (8192,), 'true': (8192,)}}\n\n\n\n{'e_form': {'pred': (8192,), 'true': (8192,)}, 'e_above_hull': {'pred': (8192,), 'true': (8192,)}}\n\n\n\n\n\n\n\n\n\n\nname\nF1\nDAF\nPrecision\nRecall\nAccuracy\nTPR\nFPR\nTNR\nFNR\nTP\nFP\nTN\nFN\nMAE\nRMSE\nR2\n\n\n\n\n0\nmptrj-jmps-s2ef_s2re_s2e_energy\n0.784783\n4.666613\n0.818594\n0.753653\n0.927490\n0.753653\n0.035529\n0.964471\n0.246347\n1083\n240\n6515\n354\n0.035932\n0.081184\n0.786146\n\n\n1\nmptrj-jmps-ec1.0_fc100.0_sc1.0_s2re_energy\n0.730471\n4.231260\n0.784580\n0.683344\n0.906494\n0.683344\n0.042709\n0.957291\n0.316656\n1038\n285\n6388\n481\n0.040820\n0.084466\n0.756666\n\n\n2\nmptrj-jmps-wd0.1_s2e_energy\n0.760542\n4.823078\n0.743008\n0.778922\n0.924438\n0.778922\n0.049062\n0.950938\n0.221078\n983\n340\n6590\n279\n0.037506\n0.082736\n0.771938\n\n\n3\nmptrj-jmps-posaug0.01_s2re_energy\n0.774379\n4.575947\n0.813303\n0.739011\n0.923462\n0.739011\n0.036669\n0.963331\n0.260989\n1076\n247\n6489\n380\n0.037098\n0.080555\n0.781434\n\n\n4\nmptrj-jmps-posaug0.01_s2e_energy\n0.788618\n4.777188\n0.806500\n0.771511\n0.930176\n0.771511\n0.037597\n0.962403\n0.228489\n1067\n256\n6553\n316\n0.037591\n0.083958\n0.775603\n\n\n5\nmptrj-jmps-ec20.0_fc20.0_sc10.0_s2re_energy\n0.757396\n4.591307\n0.773998\n0.741492\n0.919922\n0.741492\n0.043900\n0.956100\n0.258508\n1024\n299\n6512\n357\n0.038808\n0.082041\n0.756282\n\n\n6\nmptrj-jmps-ec100.0_fc100.0_sc1.0_s2e_energy\n0.768444\n4.603513\n0.795163\n0.743463\n0.922607\n0.743463\n0.039988\n0.960012\n0.256537\n1052\n271\n6506\n363\n0.039654\n0.087729\n0.745308\n\n\n7\nmptrj-jmps-s2ef_s2re_s2re_energy\n0.768166\n4.386156\n0.839002\n0.708360\n0.918213\n0.708360\n0.032151\n0.967849\n0.291640\n1110\n213\n6412\n457\n0.036932\n0.080548\n0.776085\n\n\n8\nmptrj-jmps-ec100.0_fc100.0_sc1.0_s2re_energy\n0.759619\n4.412304\n0.813303\n0.712583\n0.916870\n0.712583\n0.036965\n0.963035\n0.287417\n1076\n247\n6435\n434\n0.039558\n0.085523\n0.738495\n\n\n9\nmptrj-jmps-ec1.0_fc100.0_sc1.0_s2e_energy\n0.749629\n4.563708\n0.762661\n0.737034\n0.917725\n0.737034\n0.046021\n0.953979\n0.262966\n1009\n314\n6509\n360\n0.040631\n0.089544\n0.755822\n\n\n10\nmptrj-jmps-ec20.0_fc20.0_sc10.0_s2e_energy\n0.761652\n4.728684\n0.759637\n0.763678\n0.923218\n0.763678\n0.046248\n0.953752\n0.236322\n1005\n318\n6558\n311\n0.038665\n0.084565\n0.758008\n\n\n11\nmptrj-jmps-wd0.1_s2re_energy\n0.762286\n4.552677\n0.791383\n0.735253\n0.920288\n0.735253\n0.040780\n0.959220\n0.264747\n1047\n276\n6492\n377\n0.038262\n0.082429\n0.763875\n\n\n\n\n\n\n\n\ndef _name_postprocess(name: str):\n    if name == \"s2ef_s2re\":\n        name = \"base\"\n    name = name.replace(\".0\", \"\")\n    if name == \"posaug01\":\n        name = \"posaug0.01\"\n    return name\n\n\ndef _sortidx(name: str):\n    mapping = {\n        \"s2ef_s2re\": 0,\n        \"ec20.0_fc20.0_sc10.0\": 1,\n        \"ec100.0_fc100.0_sc1.0\": 2,\n        \"ec1.0_fc100.0_sc1.0\": 3,\n        \"wd0.1\": 4,\n        \"posaug0.01\": 5,\n    }\n    return mapping.get(name, len(mapping) + 1)\n\n\ndf_new = df.copy()\ndf_new[\"energy_type\"] = df_new[\"name\"].apply(lambda x: x.rsplit(\"_\", 2)[-2])\ndf_new[\"name\"] = df_new[\"name\"].apply(\n    lambda name: name.rsplit(\"_\", 2)[0][len(\"mptrj-jmps-\") :]\n)\ndf_new[\"_sortidx\"] = df_new[\"name\"].apply(_sortidx)\ndf_new[\"name\"] = df_new[\"name\"].apply(_name_postprocess)\n# move energy_type, _sortidx to the front\ndf_new = df_new[\n    [\"_sortidx\", \"energy_type\"]\n    + [c for c in df_new.columns if c not in (\"_sortidx\", \"energy_type\")]\n]\ndf_new = df_new.sort_values(\n    by=[\n        \"_sortidx\",\n        \"name\",\n        \"energy_type\",\n    ]\n)\ndf_new = df_new.drop(columns=\"_sortidx\").reset_index(drop=True)\ndf_new\n\n\n\n\n\n\n\n\nenergy_type\nname\nF1\nDAF\nPrecision\nRecall\nAccuracy\nTPR\nFPR\nTNR\nFNR\nTP\nFP\nTN\nFN\nMAE\nRMSE\nR2\n\n\n\n\n0\ns2e\nbase\n0.784783\n4.666613\n0.818594\n0.753653\n0.927490\n0.753653\n0.035529\n0.964471\n0.246347\n1083\n240\n6515\n354\n0.035932\n0.081184\n0.786146\n\n\n1\ns2re\nbase\n0.768166\n4.386156\n0.839002\n0.708360\n0.918213\n0.708360\n0.032151\n0.967849\n0.291640\n1110\n213\n6412\n457\n0.036932\n0.080548\n0.776085\n\n\n2\ns2e\nec20_fc20_sc10\n0.761652\n4.728684\n0.759637\n0.763678\n0.923218\n0.763678\n0.046248\n0.953752\n0.236322\n1005\n318\n6558\n311\n0.038665\n0.084565\n0.758008\n\n\n3\ns2re\nec20_fc20_sc10\n0.757396\n4.591307\n0.773998\n0.741492\n0.919922\n0.741492\n0.043900\n0.956100\n0.258508\n1024\n299\n6512\n357\n0.038808\n0.082041\n0.756282\n\n\n4\ns2e\nec100_fc100_sc1\n0.768444\n4.603513\n0.795163\n0.743463\n0.922607\n0.743463\n0.039988\n0.960012\n0.256537\n1052\n271\n6506\n363\n0.039654\n0.087729\n0.745308\n\n\n5\ns2re\nec100_fc100_sc1\n0.759619\n4.412304\n0.813303\n0.712583\n0.916870\n0.712583\n0.036965\n0.963035\n0.287417\n1076\n247\n6435\n434\n0.039558\n0.085523\n0.738495\n\n\n6\ns2e\nec1_fc100_sc1\n0.749629\n4.563708\n0.762661\n0.737034\n0.917725\n0.737034\n0.046021\n0.953979\n0.262966\n1009\n314\n6509\n360\n0.040631\n0.089544\n0.755822\n\n\n7\ns2re\nec1_fc100_sc1\n0.730471\n4.231260\n0.784580\n0.683344\n0.906494\n0.683344\n0.042709\n0.957291\n0.316656\n1038\n285\n6388\n481\n0.040820\n0.084466\n0.756666\n\n\n8\ns2e\nwd0.1\n0.760542\n4.823078\n0.743008\n0.778922\n0.924438\n0.778922\n0.049062\n0.950938\n0.221078\n983\n340\n6590\n279\n0.037506\n0.082736\n0.771938\n\n\n9\ns2re\nwd0.1\n0.762286\n4.552677\n0.791383\n0.735253\n0.920288\n0.735253\n0.040780\n0.959220\n0.264747\n1047\n276\n6492\n377\n0.038262\n0.082429\n0.763875\n\n\n10\ns2e\nposaug0.01\n0.788618\n4.777188\n0.806500\n0.771511\n0.930176\n0.771511\n0.037597\n0.962403\n0.228489\n1067\n256\n6553\n316\n0.037591\n0.083958\n0.775603\n\n\n11\ns2re\nposaug0.01\n0.774379\n4.575947\n0.813303\n0.739011\n0.923462\n0.739011\n0.036669\n0.963331\n0.260989\n1076\n247\n6489\n380\n0.037098\n0.080555\n0.781434\n\n\n\n\n\n\n\n\nimport plotly.express as px\nimport plotly.graph_objects as go\nfrom plotly.subplots import make_subplots\n\n\ndef plot_metrics_plotly(df: pd.DataFrame, title: str | None = None):\n    # Create subplots\n    fig = make_subplots(\n        rows=1, cols=3, subplot_titles=(\"MAE\", \"DAF\", \"F1\"), shared_yaxes=False\n    )\n\n    # Get a color sequence that works well on both light and dark backgrounds\n    colors = px.colors.qualitative.Safe\n\n    # Define y-axis ranges\n    y_ranges = {\"MAE\": [0.03, None], \"DAF\": [4.0, None], \"F1\": [0.65, 0.801]}\n\n    # Create barplots for each metric\n    for j, energy_type in enumerate(df[\"energy_type\"].unique()):\n        for i, metric in enumerate([\"MAE\", \"DAF\", \"F1\"], start=1):\n            df_filtered = df[df[\"energy_type\"] == energy_type]\n            fig.add_trace(\n                go.Bar(\n                    x=df_filtered[\"name\"],\n                    y=df_filtered[metric],\n                    name=energy_type,\n                    marker_color=colors[j % len(colors)],  # Cycle through colors\n                    legendgroup=energy_type,  # Group bars by energy type\n                    showlegend=(i == 1),  # Only show legend for the first plot\n                    hoverinfo=\"y\",  # Only show y-value in hover\n                    hovertemplate=\"%{y:.4f}&lt;extra&gt;&lt;/extra&gt;\",  # Format to 4 decimal places\n                ),\n                row=1,\n                col=i,\n            )\n\n            # Set y-axis range for this metric\n            y_min, y_max = y_ranges[metric]\n            if y_max is None:\n                y_max = df[metric].max() * 1.1  # Add 10% padding\n            fig.update_yaxes(range=[y_min, y_max], row=1, col=i)\n\n    # Update layout\n    fig.update_layout(\n        height=400,\n        width=1000,\n        title_text=title,\n        barmode=\"group\",\n        legend=dict(orientation=\"h\", yanchor=\"bottom\", y=1.15, xanchor=\"center\", x=0.5),\n        plot_bgcolor=\"rgba(0,0,0,0)\",  # Transparent background\n        paper_bgcolor=\"rgba(0,0,0,0)\",  # Transparent paper\n        font=dict(\n            color=\"gray\"\n        ),  # Gray font color for better visibility on any background\n    )\n\n    # Update x-axis properties\n    for i in range(1, 4):\n        fig.update_xaxes(\n            tickangle=75,\n            title_text=\"\",\n            row=1,\n            col=i,\n            showgrid=True,\n            gridcolor=\"lightgray\",\n        )\n\n    # Update y-axis properties\n    for i, metric in enumerate([\"MAE\", \"DAF\", \"F1\"], start=1):\n        fig.update_yaxes(showgrid=True, gridcolor=\"lightgray\", row=1, col=i)\n\n    # Show the plot\n    fig.show()\n\n\n# Usage\nplot_metrics_plotly(df_new)\n\n                                                \n\n\n\nplot_metrics_plotly(\n    df_new[(df_new[\"name\"] == \"base\") | df_new[\"name\"].str.contains(\"ec\")],\n    \"Loss Coefficient Ablations\",\n)\n\n                                                \n\n\n\nplot_metrics_plotly(\n    df_new[(df_new[\"name\"] == \"base\") | ~df_new[\"name\"].str.contains(\"ec\")],\n    \"Regularization Ablations\",\n)"
  }
]