[
  {
    "objectID": "public-notebooks/fair-results-8k.html",
    "href": "public-notebooks/fair-results-8k.html",
    "title": "jmppeft",
    "section": "",
    "text": "Show code\ndef _name_postprocess(name: str):\n    if name == \"s2ef_s2re\":\n        name = \"base\"\n    name = name.replace(\".0\", \"\")\n    if name == \"posaug01\":\n        name = \"posaug0.01\"\n    return name\n\n\ndef _sortidx(name: str):\n    mapping = {\n        \"s2ef_s2re\": 0,\n        \"ec20.0_fc20.0_sc10.0\": 1,\n        \"ec100.0_fc100.0_sc1.0\": 2,\n        \"ec1.0_fc100.0_sc1.0\": 3,\n        \"wd0.1\": 4,\n        \"posaug0.01\": 5,\n    }\n    return mapping.get(name, len(mapping) + 1)\n\n\ndf_new = df.copy()\ndf_new[\"energy_type\"] = df_new[\"name\"].apply(lambda x: x.rsplit(\"_\", 2)[-2])\ndf_new[\"name\"] = df_new[\"name\"].apply(\n    lambda name: name.rsplit(\"_\", 2)[0][len(\"mptrj-jmps-\") :]\n)\ndf_new[\"_sortidx\"] = df_new[\"name\"].apply(_sortidx)\ndf_new[\"name\"] = df_new[\"name\"].apply(_name_postprocess)\n# move energy_type, _sortidx to the front\ndf_new = df_new[\n    [\"_sortidx\", \"energy_type\"]\n    + [c for c in df_new.columns if c not in (\"_sortidx\", \"energy_type\")]\n]\ndf_new = df_new.sort_values(\n    by=[\n        \"_sortidx\",\n        \"name\",\n        \"energy_type\",\n    ]\n)\ndf_new = df_new.drop(columns=\"_sortidx\").reset_index(drop=True)\ndf_new\n\n\n\n\n\n\n\n\n\nenergy_type\nname\nF1\nDAF\nPrecision\nRecall\nAccuracy\nTPR\nFPR\nTNR\nFNR\nTP\nFP\nTN\nFN\nMAE\nRMSE\nR2\n\n\n\n\n0\ns2e\nbase\n0.784783\n4.666613\n0.818594\n0.753653\n0.927490\n0.753653\n0.035529\n0.964471\n0.246347\n1083\n240\n6515\n354\n0.035932\n0.081184\n0.786146\n\n\n1\ns2re\nbase\n0.768166\n4.386156\n0.839002\n0.708360\n0.918213\n0.708360\n0.032151\n0.967849\n0.291640\n1110\n213\n6412\n457\n0.036932\n0.080548\n0.776085\n\n\n2\ns2e\nec20_fc20_sc10\n0.761652\n4.728684\n0.759637\n0.763678\n0.923218\n0.763678\n0.046248\n0.953752\n0.236322\n1005\n318\n6558\n311\n0.038665\n0.084565\n0.758008\n\n\n3\ns2re\nec20_fc20_sc10\n0.757396\n4.591307\n0.773998\n0.741492\n0.919922\n0.741492\n0.043900\n0.956100\n0.258508\n1024\n299\n6512\n357\n0.038808\n0.082041\n0.756282\n\n\n4\ns2e\nec100_fc100_sc1\n0.768444\n4.603513\n0.795163\n0.743463\n0.922607\n0.743463\n0.039988\n0.960012\n0.256537\n1052\n271\n6506\n363\n0.039654\n0.087729\n0.745308\n\n\n5\ns2re\nec100_fc100_sc1\n0.759619\n4.412304\n0.813303\n0.712583\n0.916870\n0.712583\n0.036965\n0.963035\n0.287417\n1076\n247\n6435\n434\n0.039558\n0.085523\n0.738495\n\n\n6\ns2e\nec1_fc100_sc1\n0.749629\n4.563708\n0.762661\n0.737034\n0.917725\n0.737034\n0.046021\n0.953979\n0.262966\n1009\n314\n6509\n360\n0.040631\n0.089544\n0.755822\n\n\n7\ns2re\nec1_fc100_sc1\n0.730471\n4.231260\n0.784580\n0.683344\n0.906494\n0.683344\n0.042709\n0.957291\n0.316656\n1038\n285\n6388\n481\n0.040820\n0.084466\n0.756666\n\n\n8\ns2e\nwd0.1\n0.760542\n4.823078\n0.743008\n0.778922\n0.924438\n0.778922\n0.049062\n0.950938\n0.221078\n983\n340\n6590\n279\n0.037506\n0.082736\n0.771938\n\n\n9\ns2re\nwd0.1\n0.762286\n4.552677\n0.791383\n0.735253\n0.920288\n0.735253\n0.040780\n0.959220\n0.264747\n1047\n276\n6492\n377\n0.038262\n0.082429\n0.763875\n\n\n10\ns2e\nposaug0.01\n0.788618\n4.777188\n0.806500\n0.771511\n0.930176\n0.771511\n0.037597\n0.962403\n0.228489\n1067\n256\n6553\n316\n0.037591\n0.083958\n0.775603\n\n\n11\ns2re\nposaug0.01\n0.774379\n4.575947\n0.813303\n0.739011\n0.923462\n0.739011\n0.036669\n0.963331\n0.260989\n1076\n247\n6489\n380\n0.037098\n0.080555\n0.781434\n\n\n\n\n\n\n\n\n\nShow code\nplot_metrics_plotly(\n    df_new[(df_new[\"name\"] == \"base\") | df_new[\"name\"].str.contains(\"ec\")],\n    \"Loss Coefficient Ablations\",\n)\n\n\n                                                \n\n\n\n\nShow code\nplot_metrics_plotly(\n    df_new[(df_new[\"name\"] == \"base\") | ~df_new[\"name\"].str.contains(\"ec\")],\n    \"Regularization Ablations\",\n)"
  },
  {
    "objectID": "public-notebooks/problematic-samples.html",
    "href": "public-notebooks/problematic-samples.html",
    "title": "jmppeft",
    "section": "",
    "text": "Show code\nimport plotly.io as pio\n\npio.renderers.default = \"plotly_mimetype+notebook_connected\"\npio.templates.default = \"plotly_white\"\n\n\n\n\nShow code\nimport numpy as np\nimport plotly.graph_objects as go\nfrom scipy.stats import gaussian_kde\n\n# Calculate the KDE\nkde = gaussian_kde(maes)\nx_range = np.linspace(min(maes), max(maes), 1000)\ny_kde = kde(x_range)\n\n# Create the density plot\nfig = go.Figure()\n\nfig.add_trace(\n    go.Scatter(x=x_range, y=y_kde, mode=\"lines\", fill=\"tozeroy\", name=\"MAE Density\")\n)\n\n# Add vertical lines for the quantiles\nq95 = np.quantile(maes, 0.95)\nfig.add_vline(\n    x=q95,\n    line_dash=\"dash\",\n    line_color=\"red\",\n    annotation_text=\"95% quantile\",\n    annotation_position=\"top right\",\n)\n\n# Update layout\nfig.update_layout(\n    title=\"Density Plot of Mean Absolute Errors (MAEs)\",\n    xaxis_title=\"MAE\",\n    yaxis_title=\"Density\",\n    showlegend=False,\n)\n\n# Show the plot\nfig.show()\n\n\n                                                \n\n\n\n\nShow code\n# Find the indices of the top 5% of MAEs\ntop_5pct_indices = np.argwhere(maes &gt; q95).flatten()\nbool_mask = np.zeros_like(maes, dtype=bool)\nbool_mask[top_5pct_indices] = True\nnu.display(bool_mask)\n\n\n     \n\n\n   \n\n\n\n\nShow code\n# Let's look at the problematic structures\nfrom jmppeft.utils.wbm_relax import setup_dataset\nfrom tqdm.auto import tqdm\n\ndataset = setup_dataset(8192)\nproblematic_data_list = [dataset[int(i)] for i in tqdm(top_5pct_indices)]\nprint(len(problematic_data_list))\n\n\n\n\n\n410\n\n\n\n\nShow code\nimport ase\nimport ase.visualize\nimport nglview\n\n\ndef display_structure(index: int):\n    data = problematic_data_list[index]\n\n    atoms = ase.Atoms(\n        numbers=data.atomic_numbers.numpy(),\n        positions=data.pos.numpy(),\n        cell=data.cell.numpy().squeeze(),\n        pbc=[True, True, True],\n    )\n\n    # return ase.visualize.view(atoms, viewer=\"ngl\")\n    return nglview.show_ase(atoms)\n\n\ndisplay_structure(0)\n\n\n\n\n\n\n\n\n\n\nShow code\nimport ase\nimport ase.visualize\nimport ipywidgets as widgets\nfrom IPython.display import clear_output, display\n\n\n# Function to display structure\ndef display_structure(index):\n    data = problematic_data_list[index]\n\n    atoms = ase.Atoms(\n        numbers=data.atomic_numbers.numpy(),\n        positions=data.pos.numpy(),\n        cell=data.cell.numpy().squeeze(),\n        pbc=[True, True, True],\n    )\n\n    return nglview.show_ase(atoms)\n\n\n# Create widgets\nindex_slider = widgets.IntSlider(\n    value=0,\n    min=0,\n    max=len(problematic_data_list) - 1,\n    step=1,\n    description=\"Sample Index:\",\n    continuous_update=False,\n)\n\noutput = widgets.Output()\n\n\n# Update function\ndef update_view(change):\n    with output:\n        clear_output(wait=True)\n        display(display_structure(change.new))\n\n\n# Connect the slider to the update function\nindex_slider.observe(update_view, names=\"value\")\n\n# Display everything\ndisplay(fig)\ndisplay(widgets.VBox([index_slider, output]))\n\n# Initialize the view\nwith output:\n    display(display_structure(0))"
  }
]